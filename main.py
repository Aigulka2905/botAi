import os
import requests
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import logging
from PyPDF2 import PdfReader
from sentence_transformers import SentenceTransformer, util

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OPENROUTER_TOKEN = os.getenv("OPENROUTER_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
webhook_domain = os.getenv("WEBHOOK_DOMAIN")
if webhook_domain:
    WEBHOOK_URL = f"https://{webhook_domain}/webhook"
else:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_DOMAIN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ Render!")

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
if not OPENROUTER_TOKEN:
    raise ValueError("OPENROUTER_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ PDF (RAG setup) ===
# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ –≤–∞—à–∏–º PDF-—Ñ–∞–π–ª–∞–º (–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
PDF_FILES = ["instructions.pdf"]  # –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ

# –ú–æ–¥–µ–ª—å –¥–ª—è embeddings (–ª–æ–∫–∞–ª—å–Ω–∞—è, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API)
embedder = SentenceTransformer('all-MiniLM-L6-v2')  # –õ—ë–≥–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
documents = []
for pdf_path in PDF_FILES:
    if os.path.exists(pdf_path):
        reader = PdfReader(pdf_path)
        for page in reader.pages:
            text = page.extract_text()
            if text:
                paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
                documents.extend(paragraphs)
    else:
        logging.warning(f"PDF —Ñ–∞–π–ª {pdf_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º embeddings –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
if documents:
    doc_embeddings = embedder.encode(documents, convert_to_tensor=True)
else:
    doc_embeddings = None
    logging.error("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è RAG!")

# === –ó–∞–ø—Ä–æ—Å –∫ OpenRouter —Å RAG ===
def query_qwen(prompt: str) -> str:
    API_URL = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_TOKEN}"}

    # RAG: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    relevant_context = ""
    if doc_embeddings is not None:
        query_embedding = embedder.encode(prompt, convert_to_tensor=True)
        cos_scores = util.pytorch_cos_sim(query_embedding, doc_embeddings)[0]
        top_results = cos_scores.topk(3)  # –¢–æ–ø-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞–±–∑–∞—Ü–∞
        for score, idx in zip(top_results[0], top_results[1]):
            if score > 0.5:  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ)
                relevant_context += documents[idx] + "\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º messages —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    messages = [
        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º —Ç–æ—Ä–≥–æ–≤—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º (–≠–¢–ü). –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—à–∞–≥–æ–≤–æ, —á–µ—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –≠–¢–ü, —Å–∫–∞–∂–∏ '–≠—Ç–æ –≤–Ω–µ –º–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'."}
    ]
    if relevant_context:
        messages.append({"role": "system", "content": f"–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {relevant_context}"})
    messages.append({"role": "user", "content": prompt})

    payload = {
        "model": "qwen/qwen2.5-vl-32b-instruct:free",
        "messages": messages,
        "max_tokens": 512,
        "temperature": 0.7,
        "top_p": 0.95
    }
    try:
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"].strip()
        else:
            print(f"–û—à–∏–±–∫–∞ OpenRouter: {response.status_code} - {response.text[:200]}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@router.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º —Ç–æ—Ä–≥–æ–≤—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º (–≠–¢–ü) –Ω–∞ –±–∞–∑–µ Qwen –æ—Ç Alibaba ü§ñ\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –≠–¢–ü, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ï–ò–°?'")

@router.message()
async def handle_message(message: Message):
    user_text = message.text
    thinking_msg = await message.answer("–î—É–º–∞—é... ‚è≥")
    response = query_qwen(user_text)
    await thinking_msg.edit_text(response)

dp.include_router(router)

# === Webhook setup ===
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    port = int(os.environ.get("PORT", 10000))
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=port)